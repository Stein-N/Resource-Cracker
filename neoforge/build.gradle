plugins {
    id 'java-library'
    id 'net.neoforged.gradle.userdev' version '7.0.81'
}

base {
    archivesName = "${mod_id}-neoforge"
}

jarJar.enable()

if (file('src/main/resources/META-INF/accesstransformer.cfg').exists()) {
    minecraft.accessTransformers.file file('src/main/resources/META-INF/accesstransformer.cfg')
}

dependencies {
    implementation "net.neoforged:neoforge:${neoforge_version}"

    implementation("xstopho.simpleconfigapi:simpleconfigapi-neoforge:${simple_config_api}")
    implementation("xstopho.stophoslib:stophoslib-neoforge:${stophos_lib}")
    jarJar("xstopho.stophoslib:stophoslib-neoforge:[${stophos_lib},)")

    compileOnly project(":common")
}

runs {
    configureEach {
        modSource project.sourceSets.main
    }
    client {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
    }
    server {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }
    data {
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

// NeoGradle compiles the game, but we don't want to add our common code to the game's code
Spec<Task> notNeoTask = { Task it -> !it.name.startsWith("neo") } as Spec<Task>

tasks.withType(JavaCompile).matching(notNeoTask).configureEach {
    source(project(":common").sourceSets.main.allSource)
}

tasks.withType(Javadoc).matching(notNeoTask).configureEach {
    source(project(":common").sourceSets.main.allJava)
}

tasks.named("sourcesJar", Jar) {
    from(project(":common").sourceSets.main.allSource)
}

tasks.withType(ProcessResources).matching(notNeoTask).configureEach {
    from project(":common").sourceSets.main.resources
    from file('src/generated/resources')
}