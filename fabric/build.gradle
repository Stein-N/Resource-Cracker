base {
    archivesName = "${mod_id}-fabric"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    if(project(":common").file("src/main/resources/${mod_id}.accesswidener").exists()){
        accessWidenerPath.set(project(":common").file("src/main/resources/${mod_id}.accesswidener"))
    }
    mixin {
        defaultRefmapName.set("${mod_id}.refmap.json")
    }

    runs {
        client {
            client()
            setConfigName("Fabric Client")
        }
        server {
            server()
            setConfigName("Fabric Server")
        }
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${fabric_api_version}"

    modImplementation "xstopho.simpleconfigapi:simpleconfigapi-fabric:${simple_config_api}"
    modImplementation "xstopho.stophoslib:stophoslib-fabric:${stophos_lib}"
    include "xstopho.stophoslib:stophoslib-fabric:${stophos_lib}"

    compileOnly project(":common")
}

tasks.withType(JavaCompile).configureEach {
    source(project(":common").sourceSets.main.allSource)
}
tasks.withType(Javadoc).configureEach {
    options.addStringOption('Xdoclint:none', '-quiet')
    source(project(":common").sourceSets.main.allJava)
}
tasks.named("sourcesJar", Jar) {
    from(project(":common").sourceSets.main.allSource)
}

processResources {
    from project(":common").sourceSets.main.resources
}