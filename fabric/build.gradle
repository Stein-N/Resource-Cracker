plugins {
    id 'fabric-loom' version '1.5-SNAPSHOT'
}

base {
    archivesName = "${mod_id}-fabric-1.20-1.20.2"
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.officialMojangMappings()

    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${fabric_api_version}"

    modImplementation "xstopho.simpleconfigapi:simpleconfigapi-fabric:${simple_config_api}"
    modImplementation "xstopho.stophoslib:stophoslib-fabric:${stophos_lib}"
    include "xstopho.stophoslib:stophoslib-fabric:${stophos_lib}"

    modRuntimeOnly "dev.emi:emi-fabric:${emi}"
    modRuntimeOnly "com.terraformersmc:modmenu:${mod_menu}"
    modRuntimeOnly "curse.maven:techreborn-233564:4786771"
    modRuntimeOnly "curse.maven:reborncore-237903:4786770"
    modRuntimeOnly "teamreborn:energy:3.0.0"

    compileOnly project(":common")
}

loom {
    if (project(":common").file("src/main/resources/${mod_id}.accesswidener").exists()) {
        accessWidenerPath.set(project(":common").file("src/main/resources/${mod_id}.accesswidener"))
    }
    mixin {
        defaultRefmapName.set("${mod_id}.refmap.json")
    }
    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            programArgs('--username', 'Dev')
            runDir("run")
        }
        datagen {
            inherit client
            name "Fabric Datagen"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
            vmArg "-Dfabric-api.datagen.modid=${mod_id}"

            runDir "build/datagen"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    source(project(":common").sourceSets.main.allSource)
}
tasks.withType(Javadoc).configureEach {
    source(project(":common").sourceSets.main.allJava)
}
tasks.named("sourcesJar", Jar) {
    from(project(":common").sourceSets.main.allSource)
}

processResources {
    from project(":common").sourceSets.main.resources
    from file("src/main/generated")
}